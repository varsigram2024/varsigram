class GenericFollowSerializer(serializers.ModelSerializer):
    follower_type = serializers.CharField(write_only=True)
    follower_id = serializers.IntegerField(write_only=True)
    followee_type = serializers.CharField(write_only=True)
    followee_id = serializers.IntegerField(write_only=True)

    class Meta:
        model = Follow
        fields = [
            'id', 'follower_type', 'follower_id', 'followee_type', 'followee_id', 'created_at'
        ]
        read_only_fields = ('created_at', 'id')

    def to_representation(self, instance):
        data = super().to_representation(instance)
        # Follower
        follower = instance.follower
        if hasattr(follower, 'name'):  # Student
            data['follower_student'] = StudentProfileSerializer(follower).data
            data['follower_organization'] = None
        elif hasattr(follower, 'organization_name'):  # Organization
            data['follower_student'] = None
            data['follower_organization'] = OrganizationProfileSerializer(follower).data
        else:
            data['follower_student'] = None
            data['follower_organization'] = None
        # Followee
        followee = instance.followee
        if hasattr(followee, 'name'):  # Student
            data['followee_student'] = StudentProfileSerializer(followee).data
            data['followee_organization'] = None
        elif hasattr(followee, 'organization_name'):  # Organization
            data['followee_student'] = None
            data['followee_organization'] = OrganizationProfileSerializer(followee).data
        else:
            data['followee_student'] = None
            data['followee_organization'] = None
        return data

    def create(self, validated_data):
        follower_type = validated_data.pop('follower_type')
        follower_user_id = validated_data.pop('follower_id')  # This is user.id from frontend
        followee_type = validated_data.pop('followee_type')
        followee_user_id = validated_data.pop('followee_id')  # This is user.id from frontend

        # Resolve profile IDs
        if follower_type.lower() == 'student':
            follower_id = Student.objects.get(user_id=follower_user_id).id
        elif follower_type.lower() == 'organization':
            follower_id = Organization.objects.get(user_id=follower_user_id).id
        else:
            raise serializers.ValidationError("Invalid follower_type")

        if followee_type.lower() == 'student':
            followee_id = Student.objects.get(user_id=followee_user_id).id
        elif followee_type.lower() == 'organization':
            followee_id = Organization.objects.get(user_id=followee_user_id).id
        else:
            raise serializers.ValidationError("Invalid followee_type")

        follower_content_type = ContentType.objects.get(model=follower_type.lower())
        followee_content_type = ContentType.objects.get(model=followee_type.lower())

        follow, created = Follow.objects.get_or_create(
            follower_content_type=follower_content_type,
            follower_object_id=follower_id,
            followee_content_type=followee_content_type,
            followee_object_id=followee_id,
        )
        return follow



class GenericUnfollowView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        follower_type = request.data.get('follower_type')
        follower_user_id = request.data.get('follower_id')  # This is user.id from frontend
        followee_type = request.data.get('followee_type')
        followee_user_id = request.data.get('followee_id')  # This is user.id from frontend

        if not all([follower_type, follower_user_id, followee_type, followee_user_id]):
            return Response({"error": "All fields are required."}, status=status.HTTP_400_BAD_REQUEST)

        follower_content_type = ContentType.objects.get(model=follower_type.lower())
        followee_content_type = ContentType.objects.get(model=followee_type.lower())

        # Resolve profile IDs from user IDs
        try:
            if follower_type.lower() == 'student':
                follower_profile_id = Student.objects.get(user_id=follower_user_id).id
            elif follower_type.lower() == 'organization':
                follower_profile_id = Organization.objects.get(user_id=follower_user_id).id
            else:
                return Response({"error": "Invalid follower_type."}, status=status.HTTP_400_BAD_REQUEST)

            if followee_type.lower() == 'student':
                followee_profile_id = Student.objects.get(user_id=followee_user_id).id
            elif followee_type.lower() == 'organization':
                followee_profile_id = Organization.objects.get(user_id=followee_user_id).id
            else:
                return Response({"error": "Invalid followee_type."}, status=status.HTTP_400_BAD_REQUEST)
        except (Student.DoesNotExist, Organization.DoesNotExist):
            return Response({"error": "Profile not found."}, status=status.HTTP_404_NOT_FOUND)

        try:
            follow = Follow.objects.get(
                follower_content_type=follower_content_type,
                follower_object_id=follower_profile_id,
                followee_content_type=followee_content_type,
                followee_object_id=followee_profile_id,
            )
            follow.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except Follow.DoesNotExist:
            return Response({"error": "Follow relationship does not exist."}, status=status.HTTP_404_NOT_FOUND)